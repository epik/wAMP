	mySongEnded: function()
	{	
// CALLED BY myTimer UPON CURRENT SONG FINISHING PLAYING
// NOTE THAT THE NEXT SONG AUTOMATICALLY STARTS PLAYING
// SO NEED TO REFLECT CURRENT SONG IN UI TO USER
// THAT WILL BE ACCOMPLISHED BY CALLING myLoadNext
	
// INCREMENT THE INDEX TO REFLECT THE CURRENT SONG
        this.myIndex++;
// UPDATE THE SONG INFO DISPLAYED TO THE USER                                   
		this.controller.get('mysonglabel').innerHTML = this.SongModel.items[this.myIndex].name;
		this.controller.get('mypathlabel').innerHTML = '<marquee behavior="scroll" direction="left" scrollamount="5">' + this.SongModel.items[this.myIndex].path +  '</marquee>';
Mojo.Log.info("PLAYIT CALLING myMetaInterval");
        this.myMetaInterval = setInterval(this.myGetMetadata.bind(this),2000);
		
Mojo.Log.info("PLAYIT IS NOW PLAYING SONG AT: " + this.SongModel.items[this.myIndex].path);               
// IF WE REACHED END OF PLAYLIST
		if(this.myIndex >= this.SongModel.items.length - 1){
// RESET INDEX BACK TO BEGINNING
// SET TO NEGATIVE ONE BECAUSE myLoadNext WILL INCREMENT IT
			this.myIndex = this.SongStartIndex;
			this.myIndex--;
		};
Mojo.Log.info("PLAYIT FUNCTION mySongEnded SET myIndex: " + this.myIndex);
Mojo.Log.info("PLAYIT FUNCTION mySongEnded NOW CALLING FUNCTION myLoadNext()");
// CUE THE NEXT SONG AND UPDATE UI TO USER
		this.myLoadNext();
	},
	
	
		myTapPlayPause: function(event)
	{
// CALLED BY THE USER CLICKING THE PLAYPAUSE BUTTON
		try
		{
// IF USER WANTS TO DEACTIVATE THE PAUSE BUTTON AND WE'RE NOT WAITING TO OPEN A NEW SONG THEN
// UNPAUSE THE CURRENT TRACK
			if (this.myIsPlaying == 0 && this.myWaitingToOpen == 0) {
Mojo.Log.info("PLAYIT myTapPlayPause CALLED PLUGIN Play");
				this.controller.get('wAMPPlugin').Play();
// MAKE SURE THE CORRECT BUTTON IS DISPLAYED TO THE USER	            
                this.controller.get('myplaypause').removeClassName("myplay");
                this.controller.get('myplaypause').addClassName("mypause");	                       
	    		this.myIsPlaying = 1;
// ELSE IF USER WANTS TO DEACTIVATE THE PAUSE BUTTON AND WE ARE WAITING TO OPEN A NEW SONG THEN
// OPEN THE NEW SONG, THEN TELL IT TO START PLAYING (BECAUSE THE PLUGIN ADHERES TO THE LAST PLAY/PAUSE STATE, WHICH IN THIS CASE WAS PAUSE)
			}else if (this.myIsPlaying == 0 && this.myWaitingToOpen == 1){
				this.myWaitingToOpen = 0;
Mojo.Log.info("PLAYIT myTapPlayPause CALLED JS myOpenNew");
				this.myOpenNew();
Mojo.Log.info("PLAYIT myTapPlayPause CALLED PLUGIN Play");
				this.controller.get('wAMPPlugin').Play();
                this.controller.get('myplaypause').removeClassName("myplay");
                this.controller.get('myplaypause').addClassName("mypause");	                       
        	}else{
// ELSE USER WANTS TO ACTIVATE THE PAUSE BUTTON SO PAUSE THE CURRENT TRACK
Mojo.Log.info("PLAYIT myTapPlayPause CALLED PLUGIN Pause");
				this.controller.get('wAMPPlugin').Pause();
                this.controller.get('myplaypause').removeClassName("mypause");
                this.controller.get('myplaypause').addClassName("myplay");	                       
	    		this.myIsPlaying = 0;
        	};
		}
		catch(e)
		{
			Mojo.Controller.errorDialog(e);
		}
	},
	
	
		myLoadNext: function()
	{
// CALLED BY activate OR myNextTrack OR myPrevTrack
// CALLED WHENEVER A SONG HAS STARTED PLAYING
// THIS FUNCTION LOADS THE NEXT TRACK WHILE THE CURRENT TRACK IS PLAYING
// MAKES THE NEXT TRACK READY TO BE USED FOR CROSSFADE OR GAPLESS PLAYBACK BASED ON this.mySyncTime

// CLEARING THIS TIMER KILLS THE INITIAL myLoadTimer
// ALSO CLEARING THIS TIMER KILLS ANY EXISTING INSTANCES OF myTimer
        clearInterval(this.myInterval);
// SET NEW TIMER TO DISPLAY SYNCED ELAPSED TRACK TIME TO USER
Mojo.Log.info("PLAYIT myLoadNext SETTING NEW INTERVAL");
        this.myInterval = setInterval(this.myTimer.bind(this),1000);
		var myNewIndex = this.myIndex + 1;
		try
		{
// CALL THE PLUGIN TO LOAD THE NEXT SONG   
// THIS PLUGIN METHOD KNOWS WHEN TO AUTOMATICALLY PLAY THIS NEXT SONG BASED ON THE INTEGER VALUE PASSED TO IT
Mojo.Log.info("PLAYIT FUNCTION myLoadNext IS ATTEMPTING TO CALL PLUGIN OpenNext WITH INDEX: " + myNewIndex + " SONG: " + this.SongModel.items[myNewIndex].path); 		
			this.controller.get('wAMPPlugin').OpenNext(this.SongModel.items[myNewIndex].path,0);
// WOULD PREFER TO CALL THE METHOD WITH A DYNAMIC VALUE CALLED this.mySyncTime BUT CURRENTLY NOT WORKING
//			this.controller.get('wAMPPlugin').OpenNext(this.SongModel.items[this.myIndex + 1].path,this.mySyncTime);
		}
		catch(e)
		{
			Mojo.Controller.errorDialog(e);
		}
	},
	

/* SINCE myNextTrack MAY TEMPORARILY SET THIS VALUE TO FALSE UNTIL THE SONG OPENS, THEN SET IT BACK NOW THAT THE SONG HAS OPENED
			this.myIsPlaying = 1;
// UPDATE THE SONG INFO DISPLAYED TO THE USER                                   
			this.controller.get('mysonglabel').innerHTML = this.SongModel.items[this.myIndex].name;
			this.controller.get('mypathlabel').innerHTML = '<marquee behavior="scroll" direction="left" scrollamount="5">' + this.SongModel.items[this.myIndex].path +  '</marquee>';
Mojo.Log.info("PLAYIT CALLING myMetaInterval");
        	this.myMetaInterval = setInterval(this.myGetMetadata.bind(this),2000);*/

	
	